* 帮助文档


  考虑这样一个问题:

  给定同等容量的箱子，和一堆占用容量的物体，如何占用最少的箱子放进去?

  有这样一个贪心思路，每个箱子放当前最大量的物体即可。当然准确答案用dp，但dp复杂度过高。

  
优化思路 

1.  后续根据mem/core 比值来买不同的服务器，从而更细粒度安排 虚拟机的放置。

2. 用 HashTable 和 RBTree 互相索引。想找一个互为索引的结构。

3. 后面可以利用req_pos_core和req_pos_mem这两个值，更加细粒度的减少判断。

4. 应该把当天最大索引之前的数据，如有delete，则随便放。

5. 虚拟机不可以删除后再创建同样的id，因此可以一开始遍历所有虚拟机数据。

6. 在一天当中，Add 和 del 既可以用 vector来倒序查看，每次add比较看是不是del，
    是的话不放进去。
    或者用 map来排序，然后再踢出这几个。

7. 每天的迁移数量，现采取重新洗牌的方式(即每次尽量用满Migrate数量)，有机会
    可以考虑用当前的AddMap来做放置。

8. 感觉 可以把后续得到的映射关系继续开map来存储。老是用指针，肉眼可见的慢。
    比如VM_Alive* 直接链接到 VM上。

9. 一种是根据比例来确定重排时机。(对于比例重排，似乎如何确定分子是有待商榷的点，
    比如连续n天积累的变化，或者一天内的变化，当然此时因子要缩小)
    一种是根据时间，比如每隔100天重排一次。

10. 可以再findSPace函数中，用startPos来简化开头。即当表中最小的元素也放不下后，
    startPos++

11. 到达每日最大索引时，是否可以排完序后，对原来的请求队列中做到排序标记，
    删除即可立刻删除。不用额外负责所有的创建容量。